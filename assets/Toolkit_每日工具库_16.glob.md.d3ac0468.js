import{_ as s,o as a,c as n,Q as o}from"./chunks/framework.84f90f1e.js";const l="/verce-blog/assets/glob.2bd0efe6.jpg",d=JSON.parse('{"title":"glob","description":"","frontmatter":{},"headers":[],"relativePath":"Toolkit/每日工具库/16.glob.md","filePath":"Toolkit/每日工具库/16.glob.md"}'),p={name:"Toolkit/每日工具库/16.glob.md"},t=o('<h1 id="glob" tabindex="-1">glob <a class="header-anchor" href="#glob" aria-label="Permalink to &quot;glob&quot;">​</a></h1><h2 id="什么是-glob" tabindex="-1">什么是 glob ? <a class="header-anchor" href="#什么是-glob" aria-label="Permalink to &quot;什么是 glob ?&quot;">​</a></h2><ul><li>官方说明：使用 shell 使用的模式来匹配文件。JavaScript 中最正确且第二快的 glob 实现</li><li>glob 是一个用于文件路径匹配的工具，它允许用户根据特定的模式来匹配文件路径，并获取符合条件的文件列表。这个工具通常用于在 Node.js 环境下进行文件操作，例如查找、读取或处理特定类型的文件。通过使用通配符（如 *、?）和特殊模式（如 **），glob 可以灵活地匹配文件路径，使得用户能够方便地根据特定的规则获取文件列表。这种功能对于需要批量处理文件的任务非常有用，例如构建工具、自动化任务或文件管理等方面</li></ul><h2 id="案例-demo" tabindex="-1">案例 demo <a class="header-anchor" href="#案例-demo" aria-label="Permalink to &quot;案例 demo&quot;">​</a></h2><p><img src="'+l+`" alt="glob"></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// load using import</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { glob, globSync, globStream, globStreamSync, Glob } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;glob&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// all js files, but don&#39;t look in node_modules</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">jsfiles</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">glob</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;**/*.js&quot;</span><span style="color:#E1E4E8;">, { ignore: </span><span style="color:#9ECBFF;">&quot;node_modules/**&quot;</span><span style="color:#E1E4E8;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// multiple patterns supported as well</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">images</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">glob</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&quot;./home/**/*.{png,jpeg}&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;public/*.{png,jpeg}&quot;</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// but of course you can do that with the glob pattern also</span></span>
<span class="line"><span style="color:#6A737D;">// the sync function is the same, just returns a string[] instead</span></span>
<span class="line"><span style="color:#6A737D;">// of Promise&lt;string[]&gt;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">imagesAlt</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">globSync</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;{css,public}/*.{png,jpeg}&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// you can also stream them, this is a Minipass stream</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">filesStream</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">globStream</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&quot;**/*.dat&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;logs/**/*.log&quot;</span><span style="color:#E1E4E8;">]);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// load using import</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { glob, globSync, globStream, globStreamSync, Glob } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;glob&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// all js files, but don&#39;t look in node_modules</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">jsfiles</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">glob</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;**/*.js&quot;</span><span style="color:#24292E;">, { ignore: </span><span style="color:#032F62;">&quot;node_modules/**&quot;</span><span style="color:#24292E;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// multiple patterns supported as well</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">images</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">glob</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&quot;./home/**/*.{png,jpeg}&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;public/*.{png,jpeg}&quot;</span><span style="color:#24292E;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// but of course you can do that with the glob pattern also</span></span>
<span class="line"><span style="color:#6A737D;">// the sync function is the same, just returns a string[] instead</span></span>
<span class="line"><span style="color:#6A737D;">// of Promise&lt;string[]&gt;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">imagesAlt</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">globSync</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;{css,public}/*.{png,jpeg}&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// you can also stream them, this is a Minipass stream</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">filesStream</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">globStream</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&quot;**/*.dat&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;logs/**/*.log&quot;</span><span style="color:#24292E;">]);</span></span></code></pre></div>`,6),e=[t];function c(r,y,i,E,u,g){return a(),n("div",null,e)}const m=s(p,[["render",c]]);export{d as __pageData,m as default};
