import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.8048b864.js";const g=JSON.parse('{"title":"marked","description":"","frontmatter":{},"headers":[],"relativePath":"thirdpartys/es6tutorial/app/bower_components/marked/README.md","filePath":"thirdpartys/es6tutorial/app/bower_components/marked/README.md"}'),e={name:"thirdpartys/es6tutorial/app/bower_components/marked/README.md"},o=l(`<h1 id="marked" tabindex="-1">marked <a class="header-anchor" href="#marked" aria-label="Permalink to &quot;marked&quot;">​</a></h1><blockquote><p>A full-featured markdown parser and compiler, written in JavaScript. Built for speed.</p></blockquote><p><a href="http://badge.fury.io/js/marked" target="_blank" rel="noreferrer"><img src="https://badge.fury.io/js/marked.png" alt="NPM version"></a></p><h2 id="install" tabindex="-1">Install <a class="header-anchor" href="#install" aria-label="Permalink to &quot;Install&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">marked</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--save</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#032F62;">marked</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--save</span></span></code></pre></div><h2 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-label="Permalink to &quot;Usage&quot;">​</a></h2><p>Minimal usage:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> marked </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;marked&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">marked</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;I am using __markdown__.&#39;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#6A737D;">// Outputs: &lt;p&gt;I am using &lt;strong&gt;markdown&lt;/strong&gt;.&lt;/p&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> marked </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;marked&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">marked</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;I am using __markdown__.&#39;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#6A737D;">// Outputs: &lt;p&gt;I am using &lt;strong&gt;markdown&lt;/strong&gt;.&lt;/p&gt;</span></span></code></pre></div><p>Example setting options with default values:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> marked </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;marked&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">marked.</span><span style="color:#B392F0;">setOptions</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  renderer: </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> marked.</span><span style="color:#B392F0;">Renderer</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">  gfm: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  tables: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  breaks: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  pedantic: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  sanitize: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  smartLists: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  smartypants: </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">marked</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;I am using __markdown__.&#39;</span><span style="color:#E1E4E8;">));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> marked </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;marked&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">marked.</span><span style="color:#6F42C1;">setOptions</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  renderer: </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> marked.</span><span style="color:#6F42C1;">Renderer</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">  gfm: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  tables: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  breaks: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  pedantic: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  sanitize: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  smartLists: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  smartypants: </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">marked</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;I am using __markdown__.&#39;</span><span style="color:#24292E;">));</span></span></code></pre></div><h2 id="marked-markdownstring-options-callback" tabindex="-1">marked(markdownString [,options] [,callback]) <a class="header-anchor" href="#marked-markdownstring-options-callback" aria-label="Permalink to &quot;marked(markdownString [,options] [,callback])&quot;">​</a></h2><h3 id="markdownstring" tabindex="-1">markdownString <a class="header-anchor" href="#markdownstring" aria-label="Permalink to &quot;markdownString&quot;">​</a></h3><p>Type: <code>string</code></p><p>String of markdown source to be compiled.</p><h3 id="options" tabindex="-1">options <a class="header-anchor" href="#options" aria-label="Permalink to &quot;options&quot;">​</a></h3><p>Type: <code>object</code></p><p>Hash of options. Can also be set using the <code>marked.setOptions</code> method as seen above.</p><h3 id="callback" tabindex="-1">callback <a class="header-anchor" href="#callback" aria-label="Permalink to &quot;callback&quot;">​</a></h3><p>Type: <code>function</code></p><p>Function called when the <code>markdownString</code> has been fully parsed when using async highlighting. If the <code>options</code> argument is omitted, this can be used as the second argument.</p><h2 id="options-1" tabindex="-1">Options <a class="header-anchor" href="#options-1" aria-label="Permalink to &quot;Options&quot;">​</a></h2><h3 id="highlight" tabindex="-1">highlight <a class="header-anchor" href="#highlight" aria-label="Permalink to &quot;highlight&quot;">​</a></h3><p>Type: <code>function</code></p><p>A function to highlight code blocks. The first example below uses async highlighting with <a href="https://github.com/rvagg/node-pygmentize-bundled" target="_blank" rel="noreferrer">node-pygmentize-bundled</a>, and the second is a synchronous example using <a href="https://github.com/isagalaev/highlight.js" target="_blank" rel="noreferrer">highlight.js</a>:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> marked </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;marked&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> markdownString </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;\`\`\`js</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;"> console.log(&quot;hello&quot;); </span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">\`\`\`&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Async highlighting with pygmentize-bundled</span></span>
<span class="line"><span style="color:#E1E4E8;">marked.</span><span style="color:#B392F0;">setOptions</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">highlight</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">code</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">lang</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">callback</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;pygmentize-bundled&#39;</span><span style="color:#E1E4E8;">)({ lang: lang, format: </span><span style="color:#9ECBFF;">&#39;html&#39;</span><span style="color:#E1E4E8;"> }, code, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">result</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(err, result.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Using async version of marked</span></span>
<span class="line"><span style="color:#B392F0;">marked</span><span style="color:#E1E4E8;">(markdownString, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">content</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (err) </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> err;</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(content);</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Synchronous highlighting with highlight.js</span></span>
<span class="line"><span style="color:#E1E4E8;">marked.</span><span style="color:#B392F0;">setOptions</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">highlight</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">code</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;highlight.js&#39;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">highlightAuto</span><span style="color:#E1E4E8;">(code).value;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">marked</span><span style="color:#E1E4E8;">(markdownString));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> marked </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;marked&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> markdownString </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;\`\`\`js</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;"> console.log(&quot;hello&quot;); </span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">\`\`\`&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Async highlighting with pygmentize-bundled</span></span>
<span class="line"><span style="color:#24292E;">marked.</span><span style="color:#6F42C1;">setOptions</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">highlight</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">code</span><span style="color:#24292E;">, </span><span style="color:#E36209;">lang</span><span style="color:#24292E;">, </span><span style="color:#E36209;">callback</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;pygmentize-bundled&#39;</span><span style="color:#24292E;">)({ lang: lang, format: </span><span style="color:#032F62;">&#39;html&#39;</span><span style="color:#24292E;"> }, code, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">err</span><span style="color:#24292E;">, </span><span style="color:#E36209;">result</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">callback</span><span style="color:#24292E;">(err, result.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Using async version of marked</span></span>
<span class="line"><span style="color:#6F42C1;">marked</span><span style="color:#24292E;">(markdownString, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">err</span><span style="color:#24292E;">, </span><span style="color:#E36209;">content</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (err) </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> err;</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(content);</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Synchronous highlighting with highlight.js</span></span>
<span class="line"><span style="color:#24292E;">marked.</span><span style="color:#6F42C1;">setOptions</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">highlight</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">code</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;highlight.js&#39;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">highlightAuto</span><span style="color:#24292E;">(code).value;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">marked</span><span style="color:#24292E;">(markdownString));</span></span></code></pre></div><h4 id="highlight-arguments" tabindex="-1">highlight arguments <a class="header-anchor" href="#highlight-arguments" aria-label="Permalink to &quot;highlight arguments&quot;">​</a></h4><p><code>code</code></p><p>Type: <code>string</code></p><p>The section of code to pass to the highlighter.</p><p><code>lang</code></p><p>Type: <code>string</code></p><p>The programming language specified in the code block.</p><p><code>callback</code></p><p>Type: <code>function</code></p><p>The callback function to call when using an async highlighter.</p><h3 id="renderer" tabindex="-1">renderer <a class="header-anchor" href="#renderer" aria-label="Permalink to &quot;renderer&quot;">​</a></h3><p>Type: <code>object</code> Default: <code>new Renderer()</code></p><p>An object containing functions to render tokens to HTML.</p><h4 id="overriding-renderer-methods" tabindex="-1">Overriding renderer methods <a class="header-anchor" href="#overriding-renderer-methods" aria-label="Permalink to &quot;Overriding renderer methods&quot;">​</a></h4><p>The renderer option allows you to render tokens in a custom manor. Here is an example of overriding the default heading token rendering by adding an embedded anchor tag like on GitHub:</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> marked </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;marked&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> renderer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> marked.</span><span style="color:#B392F0;">Renderer</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">renderer.</span><span style="color:#B392F0;">heading</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">text</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">level</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> escapedText </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> text.</span><span style="color:#B392F0;">toLowerCase</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#79B8FF;">[</span><span style="color:#F97583;">^</span><span style="color:#79B8FF;">\\w]</span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">g</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;-&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&lt;h&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> level </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&gt;&lt;a name=&quot;&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">                escapedText </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">                 </span><span style="color:#9ECBFF;">&#39;&quot; class=&quot;anchor&quot; href=&quot;#&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">                 escapedText </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">                 </span><span style="color:#9ECBFF;">&#39;&quot;&gt;&lt;span class=&quot;header-link&quot;&gt;&lt;/span&gt;&lt;/a&gt;&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">                  text </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&lt;/h&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> level </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&gt;&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">},</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">marked</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;# heading+&#39;</span><span style="color:#E1E4E8;">, { renderer: renderer }));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> marked </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;marked&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> renderer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> marked.</span><span style="color:#6F42C1;">Renderer</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">renderer.</span><span style="color:#6F42C1;">heading</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">text</span><span style="color:#24292E;">, </span><span style="color:#E36209;">level</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> escapedText </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> text.</span><span style="color:#6F42C1;">toLowerCase</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/</span><span style="color:#005CC5;">[</span><span style="color:#D73A49;">^</span><span style="color:#005CC5;">\\w]</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;-&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&lt;h&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> level </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&gt;&lt;a name=&quot;&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">                escapedText </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">                 </span><span style="color:#032F62;">&#39;&quot; class=&quot;anchor&quot; href=&quot;#&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">                 escapedText </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">                 </span><span style="color:#032F62;">&#39;&quot;&gt;&lt;span class=&quot;header-link&quot;&gt;&lt;/span&gt;&lt;/a&gt;&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">                  text </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&lt;/h&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> level </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&gt;&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">},</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">marked</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;# heading+&#39;</span><span style="color:#24292E;">, { renderer: renderer }));</span></span></code></pre></div><p>This code will output the following HTML:</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">h1</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;heading-&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;anchor&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">href</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;#heading-&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">span</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;header-link&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">span</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">a</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  heading+</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">h1</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">h1</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">a</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;heading-&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;anchor&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">href</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;#heading-&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">span</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;header-link&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">span</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">a</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  heading+</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">h1</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h4 id="block-level-renderer-methods" tabindex="-1">Block level renderer methods <a class="header-anchor" href="#block-level-renderer-methods" aria-label="Permalink to &quot;Block level renderer methods&quot;">​</a></h4><ul><li>code(<em>string</em> code, <em>string</em> language)</li><li>blockquote(<em>string</em> quote)</li><li>html(<em>string</em> html)</li><li>heading(<em>string</em> text, <em>number</em> level)</li><li>hr()</li><li>list(<em>string</em> body, <em>boolean</em> ordered)</li><li>listitem(<em>string</em> text)</li><li>paragraph(<em>string</em> text)</li><li>table(<em>string</em> header, <em>string</em> body)</li><li>tablerow(<em>string</em> content)</li><li>tablecell(<em>string</em> content, <em>object</em> flags)</li></ul><p><code>flags</code> has the following properties:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">header</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">align</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;center&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;left&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;right&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">header</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">align</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;center&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;left&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;right&#39;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="inline-level-renderer-methods" tabindex="-1">Inline level renderer methods <a class="header-anchor" href="#inline-level-renderer-methods" aria-label="Permalink to &quot;Inline level renderer methods&quot;">​</a></h4><ul><li>strong(<em>string</em> text)</li><li>em(<em>string</em> text)</li><li>codespan(<em>string</em> code)</li><li>br()</li><li>del(<em>string</em> text)</li><li>link(<em>string</em> href, <em>string</em> title, <em>string</em> text)</li><li>image(<em>string</em> href, <em>string</em> title, <em>string</em> text)</li></ul><h3 id="gfm" tabindex="-1">gfm <a class="header-anchor" href="#gfm" aria-label="Permalink to &quot;gfm&quot;">​</a></h3><p>Type: <code>boolean</code> Default: <code>true</code></p><p>Enable <a href="https://help.github.com/articles/github-flavored-markdown" target="_blank" rel="noreferrer">GitHub flavored markdown</a>.</p><h3 id="tables" tabindex="-1">tables <a class="header-anchor" href="#tables" aria-label="Permalink to &quot;tables&quot;">​</a></h3><p>Type: <code>boolean</code> Default: <code>true</code></p><p>Enable GFM <a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet#wiki-tables" target="_blank" rel="noreferrer">tables</a>. This option requires the <code>gfm</code> option to be true.</p><h3 id="breaks" tabindex="-1">breaks <a class="header-anchor" href="#breaks" aria-label="Permalink to &quot;breaks&quot;">​</a></h3><p>Type: <code>boolean</code> Default: <code>false</code></p><p>Enable GFM <a href="https://help.github.com/articles/github-flavored-markdown#newlines" target="_blank" rel="noreferrer">line breaks</a>. This option requires the <code>gfm</code> option to be true.</p><h3 id="pedantic" tabindex="-1">pedantic <a class="header-anchor" href="#pedantic" aria-label="Permalink to &quot;pedantic&quot;">​</a></h3><p>Type: <code>boolean</code> Default: <code>false</code></p><p>Conform to obscure parts of <code>markdown.pl</code> as much as possible. Don&#39;t fix any of the original markdown bugs or poor behavior.</p><h3 id="sanitize" tabindex="-1">sanitize <a class="header-anchor" href="#sanitize" aria-label="Permalink to &quot;sanitize&quot;">​</a></h3><p>Type: <code>boolean</code> Default: <code>false</code></p><p>Sanitize the output. Ignore any HTML that has been input.</p><h3 id="smartlists" tabindex="-1">smartLists <a class="header-anchor" href="#smartlists" aria-label="Permalink to &quot;smartLists&quot;">​</a></h3><p>Type: <code>boolean</code> Default: <code>true</code></p><p>Use smarter list behavior than the original markdown. May eventually be default with the old behavior moved into <code>pedantic</code>.</p><h3 id="smartypants" tabindex="-1">smartypants <a class="header-anchor" href="#smartypants" aria-label="Permalink to &quot;smartypants&quot;">​</a></h3><p>Type: <code>boolean</code> Default: <code>false</code></p><p>Use &quot;smart&quot; typograhic punctuation for things like quotes and dashes.</p><h2 id="access-to-lexer-and-parser" tabindex="-1">Access to lexer and parser <a class="header-anchor" href="#access-to-lexer-and-parser" aria-label="Permalink to &quot;Access to lexer and parser&quot;">​</a></h2><p>You also have direct access to the lexer and parser if you so desire.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> tokens </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> marked.</span><span style="color:#B392F0;">lexer</span><span style="color:#E1E4E8;">(text, options);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(marked.</span><span style="color:#B392F0;">parser</span><span style="color:#E1E4E8;">(tokens));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> tokens </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> marked.</span><span style="color:#6F42C1;">lexer</span><span style="color:#24292E;">(text, options);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(marked.</span><span style="color:#6F42C1;">parser</span><span style="color:#24292E;">(tokens));</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> lexer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> marked.</span><span style="color:#B392F0;">Lexer</span><span style="color:#E1E4E8;">(options);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> tokens </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> lexer.</span><span style="color:#B392F0;">lex</span><span style="color:#E1E4E8;">(text);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(tokens);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(lexer.rules);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> lexer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> marked.</span><span style="color:#6F42C1;">Lexer</span><span style="color:#24292E;">(options);</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> tokens </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> lexer.</span><span style="color:#6F42C1;">lex</span><span style="color:#24292E;">(text);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(tokens);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(lexer.rules);</span></span></code></pre></div><h2 id="cli" tabindex="-1">CLI <a class="header-anchor" href="#cli" aria-label="Permalink to &quot;CLI&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">marked</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-o</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">hello.html</span></span>
<span class="line"><span style="color:#B392F0;">hello</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">world</span></span>
<span class="line"><span style="color:#B392F0;">^D</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">cat</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">hello.html</span></span>
<span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">p</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">hello world</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">/p</span><span style="color:#F97583;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">marked</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-o</span><span style="color:#24292E;"> </span><span style="color:#032F62;">hello.html</span></span>
<span class="line"><span style="color:#6F42C1;">hello</span><span style="color:#24292E;"> </span><span style="color:#032F62;">world</span></span>
<span class="line"><span style="color:#6F42C1;">^D</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cat</span><span style="color:#24292E;"> </span><span style="color:#032F62;">hello.html</span></span>
<span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">p</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">hello world</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">/p</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div><h2 id="philosophy-behind-marked" tabindex="-1">Philosophy behind marked <a class="header-anchor" href="#philosophy-behind-marked" aria-label="Permalink to &quot;Philosophy behind marked&quot;">​</a></h2><p>The point of marked was to create a markdown compiler where it was possible to frequently parse huge chunks of markdown without having to worry about caching the compiled output somehow...or blocking for an unnecesarily long time.</p><p>marked is very concise and still implements all markdown features. It is also now fully compatible with the client-side.</p><p>marked more or less passes the official markdown test suite in its entirety. This is important because a surprising number of markdown compilers cannot pass more than a few tests. It was very difficult to get marked as compliant as it is. It could have cut corners in several areas for the sake of performance, but did not in order to be exactly what you expect in terms of a markdown rendering. In fact, this is why marked could be considered at a disadvantage in the benchmarks above.</p><p>Along with implementing every markdown feature, marked also implements <a href="http://github.github.com/github-flavored-markdown/" target="_blank" rel="noreferrer">GFM features</a>.</p><h2 id="benchmarks" tabindex="-1">Benchmarks <a class="header-anchor" href="#benchmarks" aria-label="Permalink to &quot;Benchmarks&quot;">​</a></h2><p>node v0.8.x</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">node</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--bench</span></span>
<span class="line"><span style="color:#B392F0;">marked</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">completed</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3411</span><span style="color:#9ECBFF;">ms.</span></span>
<span class="line"><span style="color:#B392F0;">marked</span><span style="color:#E1E4E8;"> (gfm) completed </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> 3727ms.</span></span>
<span class="line"><span style="color:#B392F0;">marked</span><span style="color:#E1E4E8;"> (pedantic) completed </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> 3201ms.</span></span>
<span class="line"><span style="color:#B392F0;">robotskirt</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">completed</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">808</span><span style="color:#9ECBFF;">ms.</span></span>
<span class="line"><span style="color:#B392F0;">showdown</span><span style="color:#E1E4E8;"> (reuse </span><span style="color:#9ECBFF;">converter</span><span style="color:#E1E4E8;">) completed </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> 11954ms.</span></span>
<span class="line"><span style="color:#B392F0;">showdown</span><span style="color:#E1E4E8;"> (new </span><span style="color:#9ECBFF;">converter</span><span style="color:#E1E4E8;">) completed </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> 17774ms.</span></span>
<span class="line"><span style="color:#B392F0;">markdown-js</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">completed</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">17191</span><span style="color:#9ECBFF;">ms.</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">node</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--bench</span></span>
<span class="line"><span style="color:#6F42C1;">marked</span><span style="color:#24292E;"> </span><span style="color:#032F62;">completed</span><span style="color:#24292E;"> </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3411</span><span style="color:#032F62;">ms.</span></span>
<span class="line"><span style="color:#6F42C1;">marked</span><span style="color:#24292E;"> (gfm) completed </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> 3727ms.</span></span>
<span class="line"><span style="color:#6F42C1;">marked</span><span style="color:#24292E;"> (pedantic) completed </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> 3201ms.</span></span>
<span class="line"><span style="color:#6F42C1;">robotskirt</span><span style="color:#24292E;"> </span><span style="color:#032F62;">completed</span><span style="color:#24292E;"> </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">808</span><span style="color:#032F62;">ms.</span></span>
<span class="line"><span style="color:#6F42C1;">showdown</span><span style="color:#24292E;"> (reuse </span><span style="color:#032F62;">converter</span><span style="color:#24292E;">) completed </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> 11954ms.</span></span>
<span class="line"><span style="color:#6F42C1;">showdown</span><span style="color:#24292E;"> (new </span><span style="color:#032F62;">converter</span><span style="color:#24292E;">) completed </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> 17774ms.</span></span>
<span class="line"><span style="color:#6F42C1;">markdown-js</span><span style="color:#24292E;"> </span><span style="color:#032F62;">completed</span><span style="color:#24292E;"> </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">17191</span><span style="color:#032F62;">ms.</span></span></code></pre></div><p><strong>Marked is now faster than Discount, which is written in C.</strong></p><p>For those feeling skeptical: These benchmarks run the entire markdown test suite 1000 times. The test suite tests every feature. It doesn&#39;t cater to specific aspects.</p><h3 id="pro-level" tabindex="-1">Pro level <a class="header-anchor" href="#pro-level" aria-label="Permalink to &quot;Pro level&quot;">​</a></h3><p>You also have direct access to the lexer and parser if you so desire.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> tokens </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> marked.</span><span style="color:#B392F0;">lexer</span><span style="color:#E1E4E8;">(text, options);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(marked.</span><span style="color:#B392F0;">parser</span><span style="color:#E1E4E8;">(tokens));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> tokens </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> marked.</span><span style="color:#6F42C1;">lexer</span><span style="color:#24292E;">(text, options);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(marked.</span><span style="color:#6F42C1;">parser</span><span style="color:#24292E;">(tokens));</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> lexer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> marked.</span><span style="color:#B392F0;">Lexer</span><span style="color:#E1E4E8;">(options);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> tokens </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> lexer.</span><span style="color:#B392F0;">lex</span><span style="color:#E1E4E8;">(text);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(tokens);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(lexer.rules);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> lexer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> marked.</span><span style="color:#6F42C1;">Lexer</span><span style="color:#24292E;">(options);</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> tokens </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> lexer.</span><span style="color:#6F42C1;">lex</span><span style="color:#24292E;">(text);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(tokens);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(lexer.rules);</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">node</span></span>
<span class="line"><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> require(</span><span style="color:#B392F0;">&#39;marked&#39;</span><span style="color:#E1E4E8;">).lexer(</span><span style="color:#B392F0;">&#39;&gt; i am using marked.&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">[ { type: </span><span style="color:#9ECBFF;">&#39;blockquote_start&#39;</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">  { type: </span><span style="color:#9ECBFF;">&#39;paragraph&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    text: </span><span style="color:#9ECBFF;">&#39;i am using marked.&#39;</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">  { type: </span><span style="color:#9ECBFF;">&#39;blockquote_end&#39;</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">  links: {} ]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">node</span></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> require(</span><span style="color:#6F42C1;">&#39;marked&#39;</span><span style="color:#24292E;">).lexer(</span><span style="color:#6F42C1;">&#39;&gt; i am using marked.&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">[ { type: </span><span style="color:#032F62;">&#39;blockquote_start&#39;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">  { type: </span><span style="color:#032F62;">&#39;paragraph&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    text: </span><span style="color:#032F62;">&#39;i am using marked.&#39;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">  { type: </span><span style="color:#032F62;">&#39;blockquote_end&#39;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">  links: {} ]</span></span></code></pre></div><h2 id="running-tests-contributing" tabindex="-1">Running Tests &amp; Contributing <a class="header-anchor" href="#running-tests-contributing" aria-label="Permalink to &quot;Running Tests &amp; Contributing&quot;">​</a></h2><p>If you want to submit a pull request, make sure your changes pass the test suite. If you&#39;re adding a new feature, be sure to add your own test.</p><p>The marked test suite is set up slightly strangely: <code>test/new</code> is for all tests that are not part of the original markdown.pl test suite (this is where your test should go if you make one). <code>test/original</code> is only for the original markdown.pl tests. <code>test/tests</code> houses both types of tests after they have been combined and moved/generated by running <code>node test --fix</code> or <code>marked --test --fix</code>.</p><p>In other words, if you have a test to add, add it to <code>test/new/</code> and then regenerate the tests with <code>node test --fix</code>. Commit the result. If your test uses a certain feature, for example, maybe it assumes GFM is <em>not</em> enabled, you can add <code>.nogfm</code> to the filename. So, <code>my-test.text</code> becomes <code>my-test.nogfm.text</code>. You can do this with any marked option. Say you want line breaks and smartypants enabled, your filename should be: <code>my-test.breaks.smartypants.text</code>.</p><p>To run the tests:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">cd</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">marked/</span></span>
<span class="line"><span style="color:#B392F0;">node</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">cd</span><span style="color:#24292E;"> </span><span style="color:#032F62;">marked/</span></span>
<span class="line"><span style="color:#6F42C1;">node</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test</span></span></code></pre></div><h3 id="contribution-and-license-agreement" tabindex="-1">Contribution and License Agreement <a class="header-anchor" href="#contribution-and-license-agreement" aria-label="Permalink to &quot;Contribution and License Agreement&quot;">​</a></h3><p>If you contribute code to this project, you are implicitly allowing your code to be distributed under the MIT license. You are also implicitly verifying that all code is your original work. <code>&lt;/legalese&gt;</code></p><h2 id="license" tabindex="-1">License <a class="header-anchor" href="#license" aria-label="Permalink to &quot;License&quot;">​</a></h2><p>Copyright (c) 2011-2014, Christopher Jeffrey. (MIT License)</p><p>See LICENSE for more info.</p>`,102),p=[o];function t(r,c,i,y,E,d){return a(),n("div",null,p)}const m=s(e,[["render",t]]);export{g as __pageData,m as default};
