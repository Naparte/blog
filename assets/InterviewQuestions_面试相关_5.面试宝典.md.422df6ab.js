import{_ as l,o as i,c as p,Q as e}from"./chunks/framework.84f90f1e.js";const m=JSON.parse('{"title":"面试宝典总结","description":"","frontmatter":{},"headers":[],"relativePath":"InterviewQuestions/面试相关/5.面试宝典.md","filePath":"InterviewQuestions/面试相关/5.面试宝典.md","lastUpdated":1704444752000}'),t={name:"InterviewQuestions/面试相关/5.面试宝典.md"},a=e('<h1 id="面试宝典总结" tabindex="-1">面试宝典总结 <a class="header-anchor" href="#面试宝典总结" aria-label="Permalink to &quot;面试宝典总结&quot;">​</a></h1><h2 id="js-基础" tabindex="-1">JS 基础 <a class="header-anchor" href="#js-基础" aria-label="Permalink to &quot;JS 基础&quot;">​</a></h2><ul><li><p>0.1 + 0.2 !== 0.3</p></li><li><p>JS 类型有哪些？</p></li><li><p>大数相加、相乘算法题</p></li><li><p>修改对象得出结果笔试题</p></li><li><p>JS 类型如何判断，有哪几种方式可用</p></li><li><p>instanceof 原理</p></li><li><p>手写 instanceof</p></li><li><p>== 和 === 操作符有什么区别</p></li><li><p>== 操作符的类型转换规则</p></li><li><p>浅拷贝和深拷贝的区别是什么</p></li><li><p>JSON.parse(JSON.stringify(a)) 存在什么问题</p></li><li><p>手写深拷贝函数</p></li><li><p>如何理解原型及原型链</p></li><li><p>如何重写原型，这个在下一章节的继承小节中有解释</p></li><li><p>原型链指向</p></li><li><p>什么是提升？</p></li><li><p>什么是暂时性死区？</p></li><li><p>var、let 及 const 区别？</p></li><li><p>原型如何实现继承？</p></li><li><p>Class 如何实现继承？</p></li><li><p>Class 本质是什么？</p></li><li><p>Proxy 可以实现什么功能？</p></li><li><p>map, filter, reduce 各自有什么作用？</p></li><li><p>Map、WeakMap、Object 区别</p></li><li><p>什么是回调函数？</p></li><li><p>回调函数有什么缺点？</p></li><li><p>如何解决回调地狱问题？</p></li><li><p>你理解的 Generator 是什么？</p></li><li><p>主要考手写 Promise</p></li><li><p>Promise 的特点是什么，分别有什么优缺点？</p></li><li><p>什么是 Promise 链？</p></li><li><p>Promise 构造函数执行和 then 函数执行有什么区别？</p></li><li><p>all、race、allSettled 各有什么作用？</p></li><li><p>async 及 await 的特点</p></li><li><p>它们的优点和缺点分别是什么？</p></li><li><p>setTimeout、setInterval、requestAnimationFrame 区别是什么？</p></li><li><p>进程线程区别</p></li><li><p>JS 单线程执行带来的优缺点</p></li><li><p>什么是执行栈</p></li><li><p>如何理解 Event loop</p></li><li><p>Node 中的 Event Loop 和浏览器中的有什么区别？</p></li><li><p>process.nexttick 执行顺序？</p></li><li><p>V8 下的垃圾回收机制是怎么样的？</p></li></ul><h2 id="衍生思考题" tabindex="-1">衍生思考题 <a class="header-anchor" href="#衍生思考题" aria-label="Permalink to &quot;衍生思考题&quot;">​</a></h2><ul><li><p>思考题一：JS 分为哪两大类型？都有什么各自的特点？你该如何判断正确的类型？</p><ul><li>对于原始类型来说，你可以指出 null 和 number 存在的一些问题。</li><li>对于对象类型来说，你可以从垃圾回收的角度去切入，</li><li>也可以说一下对象类型存在深浅拷贝的问题。</li><li>对于判断类型来说，你可以去对比一下 typeof 和 instanceof 之间的区别，也可以指出 instanceof 判断类型也不是完全准确的。</li></ul></li><li><p>思考题二：你理解的原型是什么？</p><ul><li>原型小节中的总结内容，然后还可以指出一些小点，比如并不是所有函数都有 prototype 属性，</li><li>然后引申出原型链的概念，提出如何使用原型实现继承，继而可以引申出 ES6 中的 class 实现继承</li></ul></li><li><p>思考题三：bind、call 和 apply 各自有什么区别？</p><ul><li>首先肯定是说出三者的不同，如果自己实现过其中的函数，可以尝试说出自己的思路。</li><li>然后可以聊一聊 this 的内容，有几种规则判断 this 到底是什么，</li><li>this 规则会涉及到 new，那么最后可以说下自己对于 new 的理解</li></ul></li><li><p>思考题四：ES6 中有使用过什么？</p><ul><li>比如说说 class，那么 class 又可以拉回到原型的问题；</li><li>可以说说 promise，那么线就被拉到了异步的内容；</li><li>可以说说 proxy，那么如果你使用过 Vue 这个框架，就可以谈谈响应式原理的内容；</li><li>同样也可以说说 let 这些声明变量的语法，那么就可以谈及与 var 的不同，说到提升这块的内容</li></ul></li><li><p>思考题五：JS 是如何运行的？</p><ul><li>可以先说 JS 是单线程运行的，这里就可以说说你理解的线程和进程的区别。</li><li>然后讲到执行栈，接下来的内容就是涉及 Eventloop 了，微任务和宏任务的区别，哪些是微任务，哪些又是宏任务，</li><li>还可以谈及浏览器和 Node 中的 Eventloop 的不同，最后还可以聊一聊 JS 中的垃圾回收</li></ul></li></ul><p><a href="https://juejin.cn/book/6844733763675488269/section/6844733763767779342?enter_from=course_center&amp;utm_source=course_center" target="_blank" rel="noreferrer">掘金地址</a></p>',6),o=[a];function r(s,n,c,u,_,d){return i(),p("div",null,o)}const f=l(t,[["render",r]]);export{m as __pageData,f as default};
