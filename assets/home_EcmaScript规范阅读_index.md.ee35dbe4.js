import{_ as e,o as t,c as n,Q as a}from"./chunks/framework.4582f8ba.js";const y=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"home/EcmaScript规范阅读/index.md","filePath":"home/EcmaScript规范阅读/index.md"}'),s={name:"home/EcmaScript规范阅读/index.md"},r=a(`<blockquote><p>Array</p></blockquote><p><a href="https://262.ecma-international.org/14.0/#sec-array-exotic-objects" target="_blank" rel="noreferrer">https://262.ecma-international.org/14.0/#sec-array-exotic-objects</a></p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">An Array is an exotic object that gives special treatment to array index property keys (see 6.1.7). A property whose property name is an array index is also called an element. Every Array has a non-configurable &quot;length&quot; property whose value is always a non-negative integral Number whose mathematical value is strictly less than 232. The value of the &quot;length&quot; property is numerically greater than the name of every own property whose name is an array index; whenever an own property of an Array is created or changed, other properties are adjusted as necessary to maintain this invariant. Specifically, whenever an own property is added whose name is an array index, the value of the &quot;length&quot; property is changed, if necessary, to be one more than the numeric value of that array index; and whenever the value of the &quot;length&quot; property is changed, every own property whose name is an array index whose value is not smaller than the new length is deleted. This constraint applies only to own properties of an Array and is unaffected by &quot;length&quot; or array index properties that may be inherited from its prototypes.</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">数组是一种特殊对象，对数组索引属性键（参见6.1.7）进行了特殊处理。属性名称为数组索引的属性也被称为元素。每个数组都有一个不可配置的 &quot;length&quot; 属性，其值始终是小于 2^32 的非负整数，其数学值严格小于 232。 &quot;length&quot; 属性的值在数值上大于每个名称为数组索引的自有属性的名称；每当创建或更改数组的自有属性时，其他属性会根据需要进行调整，以保持这个不变式。具体来说，每当添加一个名称为数组索引的自有属性时，如果需要， &quot;length&quot; 属性的值会更改为该数组索引的数值值加一；每当 &quot;length&quot; 属性的值更改时，所有名称为数组索引且值不小于新长度的自有属性都会被删除。这个约束仅适用于数组的自有属性，并不受其原型继承的 &quot;length&quot; 或数组索引属性的影响。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">An Array is an exotic object that gives special treatment to array index property keys (see 6.1.7). A property whose property name is an array index is also called an element. Every Array has a non-configurable &quot;length&quot; property whose value is always a non-negative integral Number whose mathematical value is strictly less than 232. The value of the &quot;length&quot; property is numerically greater than the name of every own property whose name is an array index; whenever an own property of an Array is created or changed, other properties are adjusted as necessary to maintain this invariant. Specifically, whenever an own property is added whose name is an array index, the value of the &quot;length&quot; property is changed, if necessary, to be one more than the numeric value of that array index; and whenever the value of the &quot;length&quot; property is changed, every own property whose name is an array index whose value is not smaller than the new length is deleted. This constraint applies only to own properties of an Array and is unaffected by &quot;length&quot; or array index properties that may be inherited from its prototypes.</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">数组是一种特殊对象，对数组索引属性键（参见6.1.7）进行了特殊处理。属性名称为数组索引的属性也被称为元素。每个数组都有一个不可配置的 &quot;length&quot; 属性，其值始终是小于 2^32 的非负整数，其数学值严格小于 232。 &quot;length&quot; 属性的值在数值上大于每个名称为数组索引的自有属性的名称；每当创建或更改数组的自有属性时，其他属性会根据需要进行调整，以保持这个不变式。具体来说，每当添加一个名称为数组索引的自有属性时，如果需要， &quot;length&quot; 属性的值会更改为该数组索引的数值值加一；每当 &quot;length&quot; 属性的值更改时，所有名称为数组索引且值不小于新长度的自有属性都会被删除。这个约束仅适用于数组的自有属性，并不受其原型继承的 &quot;length&quot; 或数组索引属性的影响。</span></span></code></pre></div><ul><li>每个数组对象都有一个 length 属性，其值始终是小于 2^32 的非负整数</li></ul><blockquote><p>String</p></blockquote><ul><li><a href="https://262.ecma-international.org/14.0/#sec-ecmascript-language-types-string-type" target="_blank" rel="noreferrer">https://262.ecma-international.org/14.0/#sec-ecmascript-language-types-string-type</a></li><li><a href="https://www.mulingyuer.com/archives/838/" target="_blank" rel="noreferrer">https://www.mulingyuer.com/archives/838/</a></li></ul><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">The String type is the set of all ordered sequences of zero or more 16-bit unsigned integer values (“elements”) up to a maximum length of 2^53 - 1 elements. The String type is generally used to represent textual data in a running ECMAScript program, in which case each element in the String is treated as a UTF-16 code unit value. Each element is regarded as occupying a position within the sequence. These positions are indexed with non-negative integers. The first element (if any) is at index 0, the next element (if any) at index 1, and so on. The length of a String is the number of elements (i.e., 16-bit values) within it. The empty String has length zero and therefore contains no elements.</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">ECMAScript operations that do not interpret String contents apply no further semantics. Operations that do interpret String values treat each element as a single UTF-16 code unit. However, ECMAScript does not restrict the value of or relationships between these code units, so operations that further interpret String contents as sequences of Unicode code points encoded in UTF-16 must account for ill-formed subsequences. Such operations apply special treatment to every code unit with a numeric value in the inclusive interval from 0xD800 to 0xDBFF (defined by the Unicode Standard as a leading surrogate, or more formally as a high-surrogate code unit) and every code unit with a numeric value in the inclusive interval from 0xDC00 to 0xDFFF (defined as a trailing surrogate, or more formally as a low-surrogate code unit) using the following rules:</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">字符串类型是由零个或多个 16 位无符号整数值（&quot;元素&quot;）组成的有序序列，最大长度为 2^53 - 1 个元素。字符串类型通常用于表示 ECMAScript 程序中的文本数据，在这种情况下，字符串中的每个元素都被视为一个 UTF-16 代码单元值。每个元素被认为占据序列中的一个位置。这些位置用非负整数进行索引。第一个元素（如果有）的索引为 0，下一个元素（如果有）的索引为 1，依此类推。字符串的长度是其中的元素（即 16 位值）的数量。空字符串的长度为零，因此不包含任何元素。</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">不解释字符串内容的 ECMAScript 操作不应用进一步的语义。解释字符串值的操作将每个元素视为单个 UTF-16 代码单元。然而，ECMAScript 不限制这些代码单元的值或关系，因此进一步将字符串内容解释为以 UTF-16 编码的 Unicode 代码点序列的操作必须考虑到不正确的子序列。这样的操作对于每个数值在从 0xD800 到 0xDBFF（由 Unicode 标准定义为前导代理或更正式地定义为高代理代码单元）的闭区间内以及每个数值在从 0xDC00 到 0xDFFF（定义为尾随代理或更正式地定义为低代理代码单元）的闭区间内的每个代码单元应用特殊处理，使用以下规则：</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">The String type is the set of all ordered sequences of zero or more 16-bit unsigned integer values (“elements”) up to a maximum length of 2^53 - 1 elements. The String type is generally used to represent textual data in a running ECMAScript program, in which case each element in the String is treated as a UTF-16 code unit value. Each element is regarded as occupying a position within the sequence. These positions are indexed with non-negative integers. The first element (if any) is at index 0, the next element (if any) at index 1, and so on. The length of a String is the number of elements (i.e., 16-bit values) within it. The empty String has length zero and therefore contains no elements.</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">ECMAScript operations that do not interpret String contents apply no further semantics. Operations that do interpret String values treat each element as a single UTF-16 code unit. However, ECMAScript does not restrict the value of or relationships between these code units, so operations that further interpret String contents as sequences of Unicode code points encoded in UTF-16 must account for ill-formed subsequences. Such operations apply special treatment to every code unit with a numeric value in the inclusive interval from 0xD800 to 0xDBFF (defined by the Unicode Standard as a leading surrogate, or more formally as a high-surrogate code unit) and every code unit with a numeric value in the inclusive interval from 0xDC00 to 0xDFFF (defined as a trailing surrogate, or more formally as a low-surrogate code unit) using the following rules:</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">字符串类型是由零个或多个 16 位无符号整数值（&quot;元素&quot;）组成的有序序列，最大长度为 2^53 - 1 个元素。字符串类型通常用于表示 ECMAScript 程序中的文本数据，在这种情况下，字符串中的每个元素都被视为一个 UTF-16 代码单元值。每个元素被认为占据序列中的一个位置。这些位置用非负整数进行索引。第一个元素（如果有）的索引为 0，下一个元素（如果有）的索引为 1，依此类推。字符串的长度是其中的元素（即 16 位值）的数量。空字符串的长度为零，因此不包含任何元素。</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">不解释字符串内容的 ECMAScript 操作不应用进一步的语义。解释字符串值的操作将每个元素视为单个 UTF-16 代码单元。然而，ECMAScript 不限制这些代码单元的值或关系，因此进一步将字符串内容解释为以 UTF-16 编码的 Unicode 代码点序列的操作必须考虑到不正确的子序列。这样的操作对于每个数值在从 0xD800 到 0xDBFF（由 Unicode 标准定义为前导代理或更正式地定义为高代理代码单元）的闭区间内以及每个数值在从 0xDC00 到 0xDFFF（定义为尾随代理或更正式地定义为低代理代码单元）的闭区间内的每个代码单元应用特殊处理，使用以下规则：</span></span></code></pre></div><ul><li>最大长度为 2^53 - 1</li></ul><p>重点文章</p><ul><li><a href="https://262.ecma-international.org/14.0/#sec-syntax-directed-operations" target="_blank" rel="noreferrer">https://262.ecma-international.org/14.0/#sec-syntax-directed-operations</a></li><li><a href="https://262.ecma-international.org/14.0/#sec-executable-code-and-execution-contexts" target="_blank" rel="noreferrer">https://262.ecma-international.org/14.0/#sec-executable-code-and-execution-contexts</a></li><li><a href="https://262.ecma-international.org/14.0/#sec-ordinary-and-exotic-objects-behaviours" target="_blank" rel="noreferrer">https://262.ecma-international.org/14.0/#sec-ordinary-and-exotic-objects-behaviours</a></li><li><a href="https://262.ecma-international.org/14.0/#sec-arguments-exotic-objects" target="_blank" rel="noreferrer">https://262.ecma-international.org/14.0/#sec-arguments-exotic-objects</a></li><li></li></ul>`,10),o=[r];function i(l,p,c,h,u,d){return t(),n("div",null,o)}const m=e(s,[["render",i]]);export{y as __pageData,m as default};
